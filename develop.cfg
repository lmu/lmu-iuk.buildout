#################################################################
#
#    Development Configuration
#    =========================
#    
#    This is a buildout configuration that sets up a development
#    environment for Plone. It extends buildout.cfg.
#    
#    To use this configuration, run buildout via:
#    
#    bin/buildout -c develop.cfg
#    
#    This specifies develop.cfg as buildout's configuration file. This configuration
#    file extends buildout.cfg, so that all the options from that file are 
#    automatically included.
#    
#    Included in the development configuration
#    
#    Common development tools:
#    
#     * paster and Zopeskel, an add-on skeleton construction kit.
#     
#     * mr.developer, a tool that automatically checks out source for
#       add ons from a versioning system, then adds them to your
#       development package list.
#       
#     * testrunner, which provides a command-line option to run
#       test suites.
#     
#     * omelette, which automatically musters python package sources
#       into parts/omelette for easy find / grep access.
#     
#     * DocFinderTab, which adds a "doc" tab to the ZMI to explore documentation
#       for the current Zope object.
#
#     * plone.reload, which allows you to use a URL like http://localhost:8080/@@reload
#       to reload Python and ZCML code without restarting Zope.
# 
#     Common Customizations
#     =====================
#     
#     Add packages to the sources managed by mr.developer by adding them to the
#     [sources] section below.
#     
#     Add packages to the test suite by adding them to the "test-packages" option
#     in the [buildout] section below.


############################################
# Sources
# -------
# Specify packages under development here.
#
# See http://pypi.python.org/pypi/mr.developer for mr.developer source specifications.
# <name> = <kind> [key=value] <url> [path] [key=value]
# kind = The kind of repository. Currently supported are one of svn (>= 1.5), hg, git, cvs or fs.
#
[sources]
# Examples: to check out plonetheme.sunburst from Plone's svn, use:
# plonetheme.sunburst = svn https://svn.plone.org/svn/plone/plonetheme.sunburst/trunk
#
# To use a python package that is being developed in your src subdirectory, use:
# myproduct.betterplone = fs myproduct.betterplone
lmu.policy.base                = git https://github.com/loechel/lmu.policy.base.git
lmu.policy.serviceportal       = git https://github.com/loechel/lmu.policy.serviceportal.git
lmu.policy.intranet            = git https://github.com/loechel/lmu.policy.intranet.git
lmu.theme.intranet             = git https://github.com/loechel/lmu.theme.intranet.git 
lmu.theme.serviceportal        = git https://github.com/loechel/lmu.theme.serviceportal.git
lmu.contenttypes.blog          = git https://github.com/loechel/lmu.contenttypes.blog.git 
lmu.contenttypes.pinnwand      = git https://github.com/loechel/lmu.contenttypes.pinnwand.git egg=false
lmu.contenttypes.polls         = git https://github.com/loechel/lmu.contenttypes.polls.git
pas.plugins.shibboleth_headers = git https://github.com/loechel/pas.plugins.shibboleth_headers.git
#collective.js.foundation       = git https://github.com/collective/collective.js.foundation.git pushurl=git@github.com:collective/collective.js.foundation.git
#collective.solr                = git https://github.com/loechel/collective.solr.git 
#collective.polls               = git https://github.com/collective/collective.polls.git egg=false
pas.plugins.shibboleth         = git https://github.com/affinitic/pas.plugins.shibboleth.git
#pas.plugins.ldap               = git https://github.com/collective/pas.plugins.ldap.git
#plone.app.ldap                 = git https://github.com/plone/plone.app.ldap.git
diazo                          = git https://github.com/plone/diazo.git
Products.ZopeHealthWatcher     = git https://github.com/loechel/Products.ZopeHealthWatcher.git
collective.recipe.filestorage  = git https://github.com/collective/collective.recipe.filestorage.git
collective.recipe.plonesite    = git https://github.com/collective/collective.recipe.plonesite.git

[versions]
plone.app.discussion = 2.3.2
diazo = 1.1.2.dev0

[buildout]

############################################
# Test Packages
# ----------
# Specify a list of packages that you wish to explicity include in your test suite.
# Base eggs are automatically included
#
test-packages =
#    plonetheme.sunburst


############################################
# Debug Mode
# ----------
# Most development work is done with Zope/Plone started
# in foreground mode (bin/plonectl fg), which automatically
# turns on debug mode and causes Zope/Plone to stop on
# package loading errors.
#
# Note that debug mode makes Plone run *very* slowly due to
# extra filesystem checks and granular transmission of browser resources.
#
# If you have a need to run in debug mode outside foreground
# operation, turn on debug mode below.
debug-mode = off
#
# If you're developing Plone add-ons, you should want to see
# deprecation warnings that let you know if you're using outmoded
# methods or modules.
deprecation-warnings = on
#
# Turning on verbose security may help diagnose security bugs.
# You'll also need to disable the intercepting of "unauthorized"
# errors in the error_log via the ZMI.
verbose-security = off


############################################
# Less Commonly Changed Options
# -----------------------------
# The remainder of the buildout mainly sets up the development
# environment based on the settings above.

# we're extending buildout.cfg
extends =
    buildout.cfg

extensions +=
    mr.developer

eggs +=
    Products.DocFinderTab
    plone.reload
    plone.app.debugtoolbar
    Paste
    diazo
    collective.upgrade

    ipython
    ipdb
#    Products.PDBDebugMode
    z3c.checkversions

develop += 
    src/lmu.policy.base
    src/lmu.policy.serviceportal
    src/lmu.policy.intranet
    src/lmu.theme.intranet
    src/lmu.theme.serviceportal
    src/lmu.contenttypes.blog
#    src/lmu.contenttypes.pinnwand
    src/lmu.contenttypes.polls
    src/pas.plugins.shibboleth_headers
# Non LMU-Specific Packages that should be removed if those has been updated to the current patch level
    src/diazo
#    src/collective.js.foundation
#    src/collective.solr
    src/collective.recipe.filestorage
    src/collective.recipe.plonesite


parts +=
    test
    checkversions
    omelette
    diazotools
    zopeskel
    ipzope
    i18ndude
    i18nduder

# mr.developer settings:
always-checkout = force
sources = sources
auto-checkout = *

[debug-instance]
zserver-threads = 4
locales = ${buildout:directory}/locales


[upgrade]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
scripts = upgrade-portals
arguments = args=[
    '--zope-conf', '${instance:location}/etc/zope.conf',
    '--log-file', '${buildout:directory}/var/log/upgrade.log']

[omelette]
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}

[checkversions]
# run this via bin/checkversions -l 2 versions.cfg
recipe = zc.recipe.egg
eggs = z3c.checkversions [buildout]

[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']

eggs =
    ${buildout:eggs}
    ${buildout:test-packages}

# Add diazo compile/run tools to bin; useful for debugging understanding
# diazo. See http://docs.diazo.org/en/latest/compiler.html
[diazotools]
recipe = zc.recipe.egg
eggs = diazo

[zopeskel]
# Installs paster and Zopeskel, which can be used to create new packages
# Run: ``bin/zopeskel`` or ``bin/paster create``
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    Paste
    PasteDeploy
    PasteScript
    zopeskel.diazotheme
    zopeskel.dexterity
    zopeskel.doctools
    zopeskel.browserlayer
    zest.releaser
    ${buildout:eggs}

entry-points = paster=paste.script.command:run

[ipzope]
# a IPython Shell for interactive use with zope running.
# you also need to put
# https://svn.plone.org/svn/collective/dotipython/trunk/ipy_profile_zope.py
# to your $HOME/.ipython directory for the following to work.
recipe = zc.recipe.egg
eggs = ipython
       ${debug-instance:eggs}
initialization =
       import sys, os
       os.environ["INSTANCE_HOME"] = "${debug-instance:location}"
       sys.argv[1:1] = "--profile zope".split()
scripts = 
    ipython=ipzope
    ipython

[i18ndude]
recipe = zc.recipe.egg:scripts
eggs = i18ndude
scripts = i18ndude

[i18nduder]
recipe = zc.recipe.egg
eggs = ${debug-instance:eggs}
       zettwerk.i18nduder

[translation]
recipe = infrae.i18nextract
packages =
    lmu.policy.base
    lmu.policy.serviceportal
    lmu.policy.intranet
    lmu.theme.serviceportal
    lmu.theme.intranet
    lmu.contenttypes.poll
    lmu.contenttypes.blog
#    lmu.contenttypes.pinnwand
#output = ${buildout:directory}/src/myapplication.translation/myapplication/translation/locales
#output-package = myapplication.translations
domain = lmu

