global
    log 127.0.0.1 local0
    pidfile ${buildout:directory}/var/haproxy.pid

    user ${buildout:effective-user}
    group ${buildout:effective-user}

    nbproc 1

    spread-checks 5
defaults
    log global

    mode http

    option httplog

    option httpclose
    # Remove requests from the queue if people press stop button
    option abortonclose
    option httpchk
    # If a client is bound to a particular backend but it goes down,
    # send them to a different one.
    option redispatch

    clitimeout 180000
    srvtimeout 180000
    contimeout 10000
    
frontend master
    bind ${haproxy-conf:bind-master}

    stats enable
    stats uri /haproxy-status
    stats realm HAProxy statistics

    monitor-uri /haproxy-ping
    
frontend plone
    bind ${haproxy-conf:bind-plone}
    default_backend plone-cluster

frontend geoserver
    bind ${haproxy-conf:bind-geoserver}
    default_backend geoserver-cluster

backend plone-cluster
    # Use Zope's _-ac cookie as a basis for session stickiness if present
    appsession _ac len 32 timeout 1d

    # Otherwise add a cookie called "serverid" for maintaining session stickiness.
    # This cookie lasts unitil the client's browser closes, and is invisible to Zope.
    cookie serverid insert nocache indirect
    
    ###########################################################################
    # Balancer Options:
    # If no session found, use a balancer algorithem:
    # - roundrobin  <-- 
    # - leastconn   <-- 
    # - uri         <-- 
    balance uri

    ###########################################################################
    # Server Options:
    # "cookie" sets the value of the serverid coockie to be used for the balnacer
    # "maxconn" is how many concurrent connections can be sent to the server at once
    # "check" enables health checks
    # "rise 1" consider backend up after 1 successful health check
    server instance 127.0.0.1:${instance:http-address} cookie p0101 check maxconn 2 rise 1
#    server instance2 127.0.0.1:${instance:http-address} check
backend geoserver-cluster

    balance leastconn

    server geoserver-instance ${ports:geoserver-host}:${ports:geoserver-port} check
