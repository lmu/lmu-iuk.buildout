[buildout]

development-parts =
    code-analysis
    mkrelease
    i18ndude
    i18nduder
    upgrade
    omelette
    ploneversioncheck
    checkversions
    mrbob
    zopeskel
    diazotools
    test
    zopepy
    ipzope

[development-eggs]
recipe = zc.recipe.egg
eggs =
    ipython
    ipdb
    plone.reload
    Products.Clouseau

    z3c.checkversions

#    teamrubber.theoracle

    Products.PrintingMailHost

#    archgenxml
#    Products.Zelenium

#    collective.autorestart

#    plone.app.themeeditor

zcml =
    plone.reload
#    teamrubber.theoracle
#    plone.app.themeeditor

[development-products]
recipe = plone.recipe.distros
urls =
nested-packages =
version-suffix-packages =

[upgrade]
recipe = zc.recipe.egg
eggs =
    ${buildout:eggs}
    collective.upgrade
scripts = upgrade-portals
arguments = args=[
    '--zope-conf', '${instance:location}/etc/zope.conf',
    '--log-file', '${buildout:directory}/var/log/upgrade.log']

[mkrelease]
# installs zest.releaser, po compiler
recipe = zc.recipe.egg
eggs =
    zest.releaser[recommended]
    zest.pocompile

[i18ndude]
recipe = zc.recipe.egg:scripts
eggs = i18ndude
scripts = i18ndude

[i18nduder]
recipe = zc.recipe.egg
eggs =
    ${buildout:eggs}
    zettwerk.i18nduder

[mrbob]
recipe = zc.recipe.egg
eggs =
    mr.bob
    bobtemplates.plone

[zopeskel]
# Installs paster and Zopeskel, which can be used to create new packages
# Run: ``bin/zopeskel`` or ``bin/paster create``
unzip = true
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    Paste
    PasteDeploy
    PasteScript
    zopeskel.dexterity
    zopeskel.doctools
#    collective.dexteritypaste
    zopeskel.browserlayer
    ${instance:eggs}
entry-points = paster=paste.script.command:run

[omelette]
recipe = collective.recipe.omelette
eggs =
    ${buildout:eggs}
    ${debug-eggs:eggs}
    ${development-eggs:eggs}
packages = ./

[checkversions]
# run this via bin/checkversions -l 2 versions.cfg
recipe = zc.recipe.egg
eggs = z3c.checkversions[buildout]

[ploneversioncheck]
recipe = zc.recipe.egg
eggs = plone.versioncheck

[diazotools]
# Add diazo compile/run tools to bin; useful for debugging understanding
# diazo. See http://docs.diazo.org/en/latest/compiler.html
recipe = zc.recipe.egg
eggs = diazo

[checkdocs]
# installs collective.checkdocs from pypi [https://github.com/collective/collective.checkdocs]
recipe = zc.recipe.egg
eggs =
    collective.checkdocs

[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:directory}/src/
pre-commit-hook = True

utf8-header = True
prefer-single-quotes=True
imports = True
debug-statements = True
deprecated-aliases = True
zptlint = True

[codeintel]
recipe = corneti.recipes.codeintel
eggs = ${instance:eggs}
extra-paths =
    ${omelette:location}

[test]
recipe = collective.xmltestreport
defaults = ['--auto-color', '--auto-progress', '--ignore_dir=.git', '--ignore_dir=bower_components', '--ignore_dir=node_modules']
eggs =
    ${buildout:eggs}
    ${buildout:test-packages}

[zopepy]
# installs a zopepy python interpreter that runs with your
# full Zope environment
recipe = zc.recipe.egg
eggs =
    ${buildout:eggs}
    ${debug-eggs:eggs}
interpreter = zopepy
scripts = zopepy

[ipzope]
# a IPython Shell for interactive use with zope running.
# you also need to put
# https://svn.plone.org/svn/collective/dotipython/trunk/ipy_profile_zope.py
# to your $HOME/.ipython directory for the following to work.
recipe = zc.recipe.egg
eggs =
    ipython
    ${buildout:eggs}
    ${debug-eggs:eggs}
initialization =
       import sys, os
       os.environ["INSTANCE_HOME"] = "${instance:location}"
       sys.argv[1:1] = "--profile zope".split()
scripts =
    ipython=ipzope
    ipython
